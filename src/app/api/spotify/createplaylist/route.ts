import { NextRequest, NextResponse } from 'next/server'
import { z } from 'zod'

const createPlaylistSchema = z.object({
  access_token: z.string().min(1, 'Access token is required'),
  playlist_name: z.string().min(1, 'Playlist name is required'),
  description: z.string().optional(),
  public: z.boolean().default(false),
  collaborative: z.boolean().default(false),
  tracks: z.array(z.object({
    title: z.string(),
    artist: z.string(),
    album: z.string().optional(),
  })).min(1, 'At least one track is required')
})

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { access_token, playlist_name, description, public: isPublic, collaborative, tracks } = 
      createPlaylistSchema.parse(body)

    // Get user profile first
    const profileResponse = await fetch('https://api.spotify.com/v1/me', {
      headers: {
        'Authorization': `Bearer ${access_token}`,
        'Content-Type': 'application/json',
      },
    })

    if (!profileResponse.ok) {
      console.error('Failed to get user profile:', await profileResponse.text())
      return NextResponse.json(
        { error: 'Failed to get user profile' },
        { status: 401 }
      )
    }

    const userProfile = await profileResponse.json()
    const userId = userProfile.id

    // Create empty playlist
    const createResponse = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${access_token}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        name: playlist_name,
        description: description || `Generated by Reco AI - ${new Date().toLocaleDateString()}`,
        public: isPublic,
        collaborative: collaborative,
      }),
    })

    if (!createResponse.ok) {
      const errorData = await createResponse.json()
      console.error('Failed to create playlist:', errorData)
      return NextResponse.json(
        { error: 'Failed to create playlist' },
        { status: createResponse.status }
      )
    }

    const playlist = await createResponse.json()

    // Search for tracks and collect Spotify URIs
    const trackUris: string[] = []
    const foundTracks: any[] = []
    const notFoundTracks: any[] = []

    for (const track of tracks) {
      try {
        const searchQuery = `track:"${track.title}" artist:"${track.artist}"`
        const searchParams = new URLSearchParams({
          q: searchQuery,
          type: 'track',
          limit: '1',
          market: 'US'
        })

        const searchResponse = await fetch(
          `https://api.spotify.com/v1/search?${searchParams.toString()}`,
          {
            headers: {
              'Authorization': `Bearer ${access_token}`,
              'Content-Type': 'application/json',
            },
          }
        )

        if (searchResponse.ok) {
          const searchData = await searchResponse.json()
          
          if (searchData.tracks.items && searchData.tracks.items.length > 0) {
            const spotifyTrack = searchData.tracks.items[0]
            trackUris.push(spotifyTrack.uri)
            foundTracks.push({
              original: track,
              spotify: {
                id: spotifyTrack.id,
                name: spotifyTrack.name,
                artist: spotifyTrack.artists[0]?.name,
                album: spotifyTrack.album.name,
                uri: spotifyTrack.uri,
                external_urls: spotifyTrack.external_urls,
                preview_url: spotifyTrack.preview_url
              }
            })
          } else {
            notFoundTracks.push(track)
          }
        } else {
          console.warn(`Search failed for track: ${track.title} by ${track.artist}`)
          notFoundTracks.push(track)
        }

        // Small delay to avoid rate limiting
        await new Promise(resolve => setTimeout(resolve, 100))

      } catch (trackError) {
        console.error(`Error processing track ${track.title}:`, trackError)
        notFoundTracks.push(track)
      }
    }

    // Add tracks to playlist if any were found
    if (trackUris.length > 0) {
      // Spotify allows max 100 tracks per request
      const batchSize = 100
      for (let i = 0; i < trackUris.length; i += batchSize) {
        const batch = trackUris.slice(i, i + batchSize)
        
        const addTracksResponse = await fetch(
          `https://api.spotify.com/v1/playlists/${playlist.id}/tracks`,
          {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${access_token}`,
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              uris: batch
            }),
          }
        )

        if (!addTracksResponse.ok) {
          console.error('Failed to add tracks batch:', await addTracksResponse.text())
          // Continue with next batch even if one fails
        }
      }
    }

    return NextResponse.json({
      success: true,
      playlist: {
        id: playlist.id,
        name: playlist.name,
        description: playlist.description,
        external_urls: playlist.external_urls,
        tracks_added: foundTracks.length,
        tracks_not_found: notFoundTracks.length,
      },
      tracks: {
        found: foundTracks,
        not_found: notFoundTracks,
        total_requested: tracks.length,
        success_rate: `${Math.round((foundTracks.length / tracks.length) * 100)}%`
      }
    })

  } catch (error) {
    console.error('Create playlist error:', error)
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { 
          error: 'Invalid input',
          details: error.errors.map(e => e.message).join(', ')
        },
        { status: 400 }
      )
    }

    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

export async function GET() {
  return NextResponse.json(
    { 
      message: 'Playlist creation endpoint',
      method: 'POST',
      required_fields: ['access_token', 'playlist_name', 'tracks']
    },
    { status: 200 }
  )
}